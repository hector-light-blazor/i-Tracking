// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using EntityFramework.Exceptions.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace i_App.Data.models
{
    public partial class InsuranceContext : DbContext
    {
        public InsuranceContext()
        {
        }

        public InsuranceContext(DbContextOptions<InsuranceContext> options)
            : base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            base.OnConfiguring(optionsBuilder);
            optionsBuilder.UseExceptionProcessor();
        }

        public virtual DbSet<AssetAcquisition> AssetAcquisition { get; set; }
        public virtual DbSet<AssetActionHistory> AssetActionHistory { get; set; }
        public virtual DbSet<AssetInsurances> AssetInsurances { get; set; }
        public virtual DbSet<AssetStatus> AssetStatus { get; set; }
        public virtual DbSet<AssetTransactions> AssetTransactions { get; set; }
        public virtual DbSet<AssetTypes> AssetTypes { get; set; }
        public virtual DbSet<AssetYears> AssetYears { get; set; }
        public virtual DbSet<Assets> Assets { get; set; }
        public virtual DbSet<AssetsAction> AssetsAction { get; set; }
        public virtual DbSet<DepLocations> DepLocations { get; set; }
        public virtual DbSet<Departments> Departments { get; set; }
        public virtual DbSet<InsuranceActions> InsuranceActions { get; set; }
        public virtual DbSet<InsuranceTypes> InsuranceTypes { get; set; }
        public virtual DbSet<Items> Items { get; set; }
        public virtual DbSet<Properties> Properties { get; set; }
        public virtual DbSet<PropertyCons> PropertyCons { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<UserRoles> UserRoles { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<VehicleItems> VehicleItems { get; set; }
        public virtual DbSet<VehicleMakes> VehicleMakes { get; set; }
        public virtual DbSet<VehicleModels> VehicleModels { get; set; }
        public virtual DbSet<Vehicles> Vehicles { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AssetAcquisition>(entity =>
            {
                entity.HasKey(e => e.AcqId)
                    .HasName("Acquisition$PrimaryKey");

                entity.Property(e => e.AcqId).HasColumnName("acq_id");

                entity.Property(e => e.AcqName)
                    .HasMaxLength(50)
                    .HasColumnName("acq_name");
            });

            modelBuilder.Entity<AssetActionHistory>(entity =>
            {
                entity.HasKey(e => e.ChangeId)
                    .HasName("PK_FormChangeHistory");

                entity.Property(e => e.ChangeId).HasColumnName("change_id");

                entity.Property(e => e.AsstActionId).HasColumnName("asst_action_id");

                entity.Property(e => e.ChangeDate)
                    .HasColumnType("datetime")
                    .HasColumnName("change_date");

                entity.Property(e => e.RoleId).HasColumnName("role_id");

                entity.Property(e => e.TransactionId).HasColumnName("transaction_id");

                entity.Property(e => e.UserId).HasColumnName("user_id");
            });

            modelBuilder.Entity<AssetInsurances>(entity =>
            {
                entity.HasKey(e => e.InsuranceId)
                    .HasName("AssetInsurances$transaction_id");

                entity.HasIndex(e => e.InsActionId, "AssetInsurances$trans_type_id");

                entity.Property(e => e.InsuranceId)
                    .HasColumnName("insurance_id")
                    .HasComment("Insurance ID");

                entity.Property(e => e.AssetCoverage)
                    .HasColumnType("money")
                    .HasColumnName("asset_coverage")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Asset Coverage");

                entity.Property(e => e.AssetId)
                    .HasColumnName("asset_id")
                    .HasComment("Type of asset");

                entity.Property(e => e.Contact1).HasColumnName("contact1");

                entity.Property(e => e.Contact2)
                    .HasColumnName("contact2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Contact3)
                    .HasColumnName("contact3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ContentsCoverage)
                    .HasColumnType("money")
                    .HasColumnName("contents_coverage")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Contents Coverage");

                entity.Property(e => e.Date1)
                    .HasColumnType("datetime")
                    .HasColumnName("date1")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Date2)
                    .HasColumnType("datetime")
                    .HasColumnName("date2")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Date3)
                    .HasColumnType("datetime")
                    .HasColumnName("date3");

                entity.Property(e => e.InsActionId)
                    .HasColumnName("ins_action_id")
                    .HasComment("Type of insurance form");

                entity.Property(e => e.InsDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ins_date")
                    .HasDefaultValueSql("(sysdatetime())")
                    .HasComment("Insurance Date");

                entity.Property(e => e.InsTypeId)
                    .HasColumnName("ins_type_id")
                    .HasComment("Policy ");

                entity.Property(e => e.Reason)
                    .HasMaxLength(150)
                    .HasColumnName("reason");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.Property(e => e.VehPropId)
                    .HasColumnName("veh_prop_id")
                    .HasComment("Vehicle or Heavy Equipment ID");

                entity.HasOne(d => d.Asset)
                    .WithMany(p => p.AssetInsurances)
                    .HasForeignKey(d => d.AssetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AssetInsurances_Assets");

                entity.HasOne(d => d.InsAction)
                    .WithMany(p => p.AssetInsurances)
                    .HasForeignKey(d => d.InsActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AssetInsurances_InsuranceActions");

                entity.HasOne(d => d.InsType)
                    .WithMany(p => p.AssetInsurances)
                    .HasForeignKey(d => d.InsTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AssetInsurances_InsuranceTypes");

                entity.HasOne(d => d.VehProp)
                    .WithMany(p => p.AssetInsurances)
                    .HasForeignKey(d => d.VehPropId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AssetInsurances_Vehicles");
            });

            modelBuilder.Entity<AssetStatus>(entity =>
            {
                entity.HasKey(e => e.StatusId);

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(50)
                    .HasColumnName("status_name");
            });

            modelBuilder.Entity<AssetTransactions>(entity =>
            {
                entity.HasKey(e => e.TransactionId)
                    .HasName("AssetTransactions$PrimaryKey");

                entity.HasIndex(e => e.TransactionId, "AssetTransactions$transaction_id");

                entity.HasIndex(e => e.VehPropId, "AssetTransactions$vehicle_id");

                entity.Property(e => e.TransactionId)
                    .HasColumnName("transaction_id")
                    .HasComment("Asset Transaction ID");

                entity.Property(e => e.AgendaItem)
                    .HasMaxLength(255)
                    .HasColumnName("agenda_item")
                    .HasComment("Agenda Item");

                entity.Property(e => e.AssetId).HasColumnName("asset_id");

                entity.Property(e => e.AsstActionId)
                    .HasColumnName("asst_action_id")
                    .HasComment("Asset Actions { Add Asset, Transfer Asset, Delete Asset }");

                entity.Property(e => e.CommCourtDate)
                    .HasColumnType("datetime")
                    .HasColumnName("comm_court_date")
                    .HasDefaultValueSql("(sysdatetime())")
                    .HasComment("Comm. Court Date");

                entity.Property(e => e.NewDep)
                    .HasColumnName("new_dep")
                    .HasComment("To new Department ID ");

                entity.Property(e => e.OldDep)
                    .HasColumnName("old_dep")
                    .HasComment("From this department ID");

                entity.Property(e => e.Reason)
                    .HasMaxLength(255)
                    .HasColumnName("reason");

                entity.Property(e => e.TranDate)
                    .HasColumnType("datetime")
                    .HasColumnName("tran_date")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.Property(e => e.VehPropId)
                    .HasColumnName("veh_prop_id")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Vehicle or Heavy Equipment ID");

                entity.HasOne(d => d.Asset)
                    .WithMany(p => p.AssetTransactions)
                    .HasForeignKey(d => d.AssetId)
                    .HasConstraintName("FK_AssetTransactions_Assets");

                entity.HasOne(d => d.AsstAction)
                    .WithMany(p => p.AssetTransactions)
                    .HasForeignKey(d => d.AsstActionId)
                    .HasConstraintName("AssetTransactions$AssetTransactionTypesAssetTransactions");

                entity.HasOne(d => d.VehProp)
                    .WithMany(p => p.AssetTransactions)
                    .HasForeignKey(d => d.VehPropId)
                    .HasConstraintName("AssetTransactions$AssetInventoryAssetTransactions");
            });

            modelBuilder.Entity<AssetTypes>(entity =>
            {
                entity.HasKey(e => e.AssetTypeId)
                    .HasName("AssetTypes$PrimaryKey");

                entity.HasIndex(e => e.AssetId, "AssetTypes$asset_id");

                entity.HasIndex(e => e.AssetTypeId, "AssetTypes$veh_type_id");

                entity.Property(e => e.AssetTypeId).HasColumnName("asset_type_id");

                entity.Property(e => e.AssetId).HasColumnName("asset_id");

                entity.Property(e => e.AssetTypeName)
                    .HasMaxLength(255)
                    .HasColumnName("asset_type_name");

                entity.HasOne(d => d.Asset)
                    .WithMany(p => p.AssetTypes)
                    .HasForeignKey(d => d.AssetId)
                    .HasConstraintName("AssetTypes$AssetsAssetTypes");
            });

            modelBuilder.Entity<AssetYears>(entity =>
            {
                entity.HasKey(e => e.YearId)
                    .HasName("AssetYears$PrimaryKey");

                entity.HasIndex(e => e.YearId, "AssetYears$year_id");

                entity.Property(e => e.YearId).HasColumnName("year_id");

                entity.Property(e => e.YearNum).HasColumnName("year_num");
            });

            modelBuilder.Entity<Assets>(entity =>
            {
                entity.HasKey(e => e.AssetId)
                    .HasName("Assets$PrimaryKey");

                entity.HasIndex(e => e.AssetId, "Assets$asset_id");

                entity.Property(e => e.AssetId)
                    .ValueGeneratedNever()
                    .HasColumnName("asset_id");

                entity.Property(e => e.AssetName)
                    .HasMaxLength(50)
                    .HasColumnName("asset_name");
            });

            modelBuilder.Entity<AssetsAction>(entity =>
            {
                entity.HasKey(e => e.AsstActionId)
                    .HasName("TransationTypes$PrimaryKey");

                entity.HasIndex(e => e.AsstActionId, "TransationTypes$trans_type_id");

                entity.Property(e => e.AsstActionId)
                    .ValueGeneratedNever()
                    .HasColumnName("asst_action_id");

                entity.Property(e => e.AsstActionName)
                    .HasMaxLength(30)
                    .HasColumnName("asst_action_name");
            });

            modelBuilder.Entity<DepLocations>(entity =>
            {
                entity.HasKey(e => e.LocationId);

                entity.Property(e => e.LocationId).HasColumnName("location_id");

                entity.Property(e => e.DepId).HasColumnName("dep_id");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(50)
                    .HasColumnName("location_name");

                entity.Property(e => e.LocationNum)
                    .HasMaxLength(8)
                    .HasColumnName("location_num");

                entity.HasOne(d => d.Dep)
                    .WithMany(p => p.DepLocations)
                    .HasForeignKey(d => d.DepId)
                    .HasConstraintName("FK_DepLocations_Departments");
            });

            modelBuilder.Entity<Departments>(entity =>
            {
                entity.HasKey(e => e.DepId)
                    .HasName("Departments$PrimaryKey");

                entity.HasIndex(e => e.DepId, "Departments$dep_id");

                entity.Property(e => e.DepId).HasColumnName("dep_id");

                entity.Property(e => e.DepName)
                    .HasMaxLength(255)
                    .HasColumnName("dep_name");

                entity.Property(e => e.DepNum)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("dep_num");
            });

            modelBuilder.Entity<InsuranceActions>(entity =>
            {
                entity.HasKey(e => e.InsActionId)
                    .HasName("InsuranceActions$PrimaryKey");

                entity.HasIndex(e => e.InsActionId, "InsuranceActions$trans_type_id");

                entity.Property(e => e.InsActionId)
                    .ValueGeneratedNever()
                    .HasColumnName("ins_action_id")
                    .HasComment("Type of insurance form");

                entity.Property(e => e.InsActionName)
                    .HasMaxLength(30)
                    .HasColumnName("Ins_action_name");
            });

            modelBuilder.Entity<InsuranceTypes>(entity =>
            {
                entity.HasKey(e => e.InsTypeId)
                    .HasName("InsuranceTypes$PrimaryKey");

                entity.Property(e => e.InsTypeId).HasColumnName("ins_type_id");

                entity.Property(e => e.InsDesc)
                    .HasMaxLength(150)
                    .HasColumnName("ins_desc");

                entity.Property(e => e.InsName)
                    .HasMaxLength(50)
                    .HasColumnName("ins_name");
            });

            modelBuilder.Entity<Items>(entity =>
            {
                entity.HasKey(e => e.ItemId)
                    .HasName("Items$PrimaryKey");

                entity.Property(e => e.ItemId).HasColumnName("item_id");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(50)
                    .HasColumnName("item_name");
            });

            modelBuilder.Entity<Properties>(entity =>
            {
                entity.HasKey(e => e.PropertyId)
                    .HasName("Properties$PrimaryKey");

                entity.Property(e => e.PropertyId)
                    .ValueGeneratedNever()
                    .HasColumnName("property_id");

                entity.Property(e => e.Address)
                    .HasMaxLength(150)
                    .HasColumnName("address");

                entity.Property(e => e.AssetId).HasColumnName("asset_id");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .HasColumnName("city");

                entity.Property(e => e.Comments)
                    .HasMaxLength(50)
                    .HasColumnName("comments");

                entity.Property(e => e.ConstructionId).HasColumnName("construction_id");

                entity.Property(e => e.DepId).HasColumnName("dep_id");

                entity.Property(e => e.ElectronicEquip)
                    .HasColumnName("electronic_equip")
                    .HasComment("Electronic Equipment [Y/N]");

                entity.Property(e => e.FacilityName)
                    .HasMaxLength(150)
                    .HasColumnName("facility_name");

                entity.Property(e => e.LocationId).HasColumnName("location_id");

                entity.Property(e => e.NumFloors).HasColumnName("num_floors");

                entity.Property(e => e.NumStories).HasColumnName("num_stories");

                entity.Property(e => e.Occupancy)
                    .HasMaxLength(100)
                    .HasColumnName("occupancy");

                entity.Property(e => e.RoofType)
                    .HasMaxLength(50)
                    .HasColumnName("roof_type");

                entity.Property(e => e.SatusId).HasColumnName("satus_id");

                entity.Property(e => e.Sprinklers)
                    .HasColumnName("sprinklers")
                    .HasComment("Sprinklers [Y/N]");

                entity.Property(e => e.SqFtAcreage).HasColumnName("sq_ft_acreage");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.Property(e => e.YearId)
                    .HasColumnName("year_id")
                    .HasComment("Year Built");

                entity.Property(e => e.Zip)
                    .HasMaxLength(10)
                    .HasColumnName("zip");

                entity.HasOne(d => d.Asset)
                    .WithMany(p => p.Properties)
                    .HasForeignKey(d => d.AssetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Properties_Assets");

                entity.HasOne(d => d.Construction)
                    .WithMany(p => p.Properties)
                    .HasForeignKey(d => d.ConstructionId)
                    .HasConstraintName("FK_Properties_ConstructionTypes");

                entity.HasOne(d => d.Dep)
                    .WithMany(p => p.Properties)
                    .HasForeignKey(d => d.DepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Properties_Departments");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Properties)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("FK_Properties_DepLocations");

                entity.HasOne(d => d.Satus)
                    .WithMany(p => p.Properties)
                    .HasForeignKey(d => d.SatusId)
                    .HasConstraintName("FK_Properties_AssetStatus");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Properties)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Properties_Users");
            });

            modelBuilder.Entity<PropertyCons>(entity =>
            {
                entity.HasKey(e => e.ConstructionId)
                    .HasName("PK_ConstructionType");

                entity.Property(e => e.ConstructionId).HasColumnName("construction_id");

                entity.Property(e => e.ConstDesc)
                    .HasMaxLength(150)
                    .HasColumnName("const_desc");
            });

            modelBuilder.Entity<Roles>(entity =>
            {
                entity.HasKey(e => e.RoleId);

                entity.Property(e => e.RoleId).HasColumnName("role_id");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("date")
                    .HasColumnName("create_date");

                entity.Property(e => e.RoleDescription)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("role_description");

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("role_name");
            });

            modelBuilder.Entity<UserRoles>(entity =>
            {
                entity.HasKey(e => e.UserRoleId);

                entity.Property(e => e.UserRoleId).HasColumnName("user_role_id");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("date")
                    .HasColumnName("create_date");

                entity.Property(e => e.RoleId).HasColumnName("role_id");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserRoles_Roles");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserRoles_Users");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("DepRepresent$PrimaryKey");

                entity.HasIndex(e => e.UserId, "DepRepresent$employee_id");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.Property(e => e.Active)
                    .HasColumnName("active")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DepId).HasColumnName("dep_id");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .HasColumnName("email");

                entity.Property(e => e.Extension)
                    .HasMaxLength(4)
                    .HasColumnName("extension");

                entity.Property(e => e.Password)
                    .HasMaxLength(255)
                    .HasColumnName("password");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .HasColumnName("user_name");

                entity.HasOne(d => d.Dep)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.DepId)
                    .HasConstraintName("FK_Users_Departments");
            });

            modelBuilder.Entity<VehicleItems>(entity =>
            {
                entity.HasKey(e => e.VeItemId)
                    .HasName("AssetItems$PrimaryKey");

                entity.Property(e => e.VeItemId).HasColumnName("ve_item_id");

                entity.Property(e => e.ItemCost)
                    .HasColumnType("money")
                    .HasColumnName("item_cost");

                entity.Property(e => e.ItemId).HasColumnName("item_id");

                entity.Property(e => e.VehicleId).HasColumnName("vehicle_id");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.VehicleItems)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("AssetItems$ItemsAssetItems");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.VehicleItems)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("AssetItems$AssetInventoryAssetItems");
            });

            modelBuilder.Entity<VehicleMakes>(entity =>
            {
                entity.HasKey(e => e.MakeId)
                    .HasName("Makes$PrimaryKey");

                entity.HasIndex(e => e.MakeId, "Makes$make_id");

                entity.Property(e => e.MakeId).HasColumnName("make_id");

                entity.Property(e => e.MakeName)
                    .HasMaxLength(255)
                    .HasColumnName("make_name");
            });

            modelBuilder.Entity<VehicleModels>(entity =>
            {
                entity.HasKey(e => e.ModelId)
                    .HasName("Models$PrimaryKey");

                entity.HasIndex(e => e.ModelId, "Models$model_id");

                entity.Property(e => e.ModelId).HasColumnName("model_id");

                entity.Property(e => e.MakeId).HasColumnName("make_id");

                entity.Property(e => e.ModelName)
                    .HasMaxLength(255)
                    .HasColumnName("model_name");

                entity.HasOne(d => d.Make)
                    .WithMany(p => p.VehicleModels)
                    .HasForeignKey(d => d.MakeId)
                    .HasConstraintName("FK_Models_Makes");
            });

            modelBuilder.Entity<Vehicles>(entity =>
            {
                entity.HasKey(e => e.VehicleId)
                    .HasName("AssetInventory$PrimaryKey");

                entity.HasIndex(e => e.AssetId, "AssetInventory$asset_id");

                entity.HasIndex(e => e.DepId, "AssetInventory$dep_id1");

                entity.HasIndex(e => e.MakeId, "AssetInventory$make_id");

                entity.HasIndex(e => e.ModelId, "AssetInventory$model_id");

                entity.HasIndex(e => e.StatusId, "AssetInventory$status_id");

                entity.HasIndex(e => e.AssetTypeId, "AssetInventory$type_id");

                entity.HasIndex(e => e.YearId, "AssetInventory$year_id");

                entity.Property(e => e.VehicleId).HasColumnName("vehicle_id");

                entity.Property(e => e.AcqDate)
                    .HasColumnType("date")
                    .HasColumnName("acq_date")
                    .HasDefaultValueSql("(sysdatetime())")
                    .HasComment("Acquisition Date");

                entity.Property(e => e.AcqId).HasColumnName("acq_id");

                entity.Property(e => e.AssetAge)
                    .HasColumnName("asset_age")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AssetId)
                    .HasColumnName("asset_id")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AssetTypeId)
                    .HasColumnName("asset_type_id")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BookValue)
                    .HasColumnType("money")
                    .HasColumnName("book_value");

                entity.Property(e => e.CountyAsset)
                    .HasMaxLength(50)
                    .HasColumnName("county_asset");

                entity.Property(e => e.DepId)
                    .HasColumnName("dep_id")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EstimateDate)
                    .HasColumnType("date")
                    .HasColumnName("estimate_date")
                    .HasComment("Estimate Arrival Date");

                entity.Property(e => e.LicenseTag)
                    .HasMaxLength(50)
                    .HasColumnName("license_tag");

                entity.Property(e => e.LocationId).HasColumnName("location_id");

                entity.Property(e => e.MakeId)
                    .HasColumnName("make_id")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mileage)
                    .HasColumnName("mileage")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Notes)
                    .HasMaxLength(255)
                    .HasColumnName("notes");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(10)
                    .HasColumnName("po_number");

                entity.Property(e => e.RcvdDate)
                    .HasColumnType("date")
                    .HasColumnName("rcvd_date")
                    .HasComment("Received Date");

                entity.Property(e => e.ReqNum).HasColumnName("req_num");

                entity.Property(e => e.StatusId)
                    .HasColumnName("status_id")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TitleName)
                    .HasMaxLength(150)
                    .HasColumnName("title_name");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.Property(e => e.VinSerialNumber)
                    .HasMaxLength(20)
                    .HasColumnName("vin_serial_number");

                entity.Property(e => e.YearId)
                    .HasColumnName("year_id")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Acq)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.AcqId)
                    .HasConstraintName("AssetInventory$AcquisitionAssetInventory");

                entity.HasOne(d => d.Asset)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.AssetId)
                    .HasConstraintName("AssetInventory$AssetsAssetInventory");

                entity.HasOne(d => d.AssetType)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.AssetTypeId)
                    .HasConstraintName("AssetInventory$AssetTypesAssetInventory");

                entity.HasOne(d => d.Dep)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.DepId)
                    .HasConstraintName("AssetInventory$DepartmentsAssetInventory");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("FK_Vehicles_DepLocations");

                entity.HasOne(d => d.Make)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.MakeId)
                    .HasConstraintName("AssetInventory$MakesAssetInventory");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.ModelId)
                    .HasConstraintName("AssetInventory$ModelsAssetInventory");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_AssetInventory_AssetStatus");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("AssetInventory$DepContactsAssetInventory");

                entity.HasOne(d => d.Year)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.YearId)
                    .HasConstraintName("AssetInventory$AssetYearsAssetInventory");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}